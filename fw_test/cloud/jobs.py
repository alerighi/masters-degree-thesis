import json
import uuid

from logging import getLogger
from enum import StrEnum, auto
from dataclasses import dataclass

import boto3

from fw_test.config import Config

LOGGER = getLogger(__name__)


class JobState(StrEnum):
    QUEUED = auto()
    IN_PROGRESS = auto()
    SUCCEEDED = auto()
    FAILED = auto()
    TIMED_OUT = auto()
    REJECTED = auto()
    REMOVED = auto()
    CANCELED = auto()


@dataclass
class Job:
    id: str


class AwsJobs:
    """
    manages AWS jobs
    """
    def __init__(self, config: Config):
        self._config = config
        session = boto3.Session(
            profile_name=config.aws_profile,
            region_name=config.aws_region,
        )
        self._iot = session.client("iot")

    def create(self, document: dict) -> Job:
        response = self._iot.describe_thing(
            thingName=self._config.mac_address,
        )
        thing_arn = response['thingArn']
        job_id = f"FW_TEST_{uuid.uuid4()}"
        self._iot.create_job(
            jobId=job_id,
            targets=[thing_arn],
            document=json.dumps(document),
            description=f"job automatically generated by fw_test tool",
            targetSelection='SNAPSHOT',
            timeoutConfig={
                "inProgressTimeoutInMinutes": 1
            },
        )

        LOGGER.info("job %d created", job_id)

        return Job(job_id)

    def state(self, job: Job) -> JobState:
        response = self._iot.list_job_executions_for_job(
            jobId=job.id,
        )
        if response["executionSummaries"]:
            thing = response["executionSummaries"][0]
            summary = thing["jobExecutionSummary"]
            status = summary["status"]

            return JobState[status]

        return JobState.QUEUED

    def delete(self, job: Job):
        response = self._iot.delete_job(
            jobId=job.id,
            force=True,
        )
        LOGGER.info("job %d deleted", job.id)
