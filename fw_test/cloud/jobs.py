import json

from logging import getLogger
from enum import StrEnum, auto
from dataclasses import dataclass

from fw_test.config import Config

LOGGER = getLogger(__name__)


class JobState(StrEnum):
    QUEUED = auto()
    IN_PROGRESS = auto()
    SUCCEEDED = auto()
    FAILED = auto()
    TIMED_OUT = auto()
    REJECTED = auto()
    REMOVED = auto()
    CANCELED = auto()


@dataclass
class Job:
    id: str
    document: dict


class AwsJobs:
    """
    manages AWS jobs
    """
    def __init__(self, config: Config, iot):
        self._config = config
        self._iot = iot
        self._thing_arn = self._iot.describe_thing(
            thingName=self._config.mac_address,
        )["thingArn"]

    def create(self, job: Job):
        response = self._iot.create_job(
            jobId=job.id,
            targets=[self._thing_arn],
            document=json.dumps(job.document),
            description=f"job automatically generated by fw_test tool",
            targetSelection='SNAPSHOT',
            timeoutConfig={
                "inProgressTimeoutInMinutes": 1
            },
        )

        LOGGER.info("job %s created: %s", job.id, response)

    def state(self, job: Job) -> JobState:
        response = self._iot.list_job_executions_for_job(
            jobId=job.id,
        )
        if response["executionSummaries"]:
            thing = response["executionSummaries"][0]
            summary = thing["jobExecutionSummary"]
            status = summary["status"]

            return JobState[status]

        return JobState.QUEUED

    def delete(self, job: Job):
        response = self._iot.delete_job(
            jobId=job.id,
            force=True,
        )
        LOGGER.info("job %s deleted: %s", job.id, response)
